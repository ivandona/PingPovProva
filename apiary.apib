FORMAT: 1A
HOST: https://polls.apiblueprint.org/

# PingPov Api

Web app per la gestione dei tornei e partite di ping pong a Povo

## Prenotazioni Tavolo [/Prenotazioni_Tavolo]

### /v1/prenotazioni [GET]
/v1/prenotazioni serve per ricercare all'interno del database tutti i possibili slot di prenotazione che vengono visualizzati in ordine temporale a partire dalla data e ora selezionate e inoltre filtra anche per la sede
 
 + Request (applicatiopn/json) 
    
  + Location 
        
        /v1/prenotazioni


  + Body 
  
            
            {
            "username":"username"
            }
 
 + Response 200 (application/json)

        [
            {
                "prenotazioni":[
                    {"_id":{"$oid":"62825720c87c317dbcb1579f"},
                    "prenotatore":" Pippomarco",
                    "sede":"Povo1"
                    ,"giorno":{"$date":{"$numberLong":"1652662800000"}
                    }
                    },
                    {
                "prenotazioni": [
                    {"_id":{"$oid":"62825745c87c317dbcb1579f"},
                    "prenotatore":"",
                    "sede":"Povo1"
                    ,"giorno":{"$date":{"$numberLong":"1652662800000"}
                    }
                    }
                  
           
        ]
        
        

        
        
### /v1/aggiungiPrenotazione/:id [PUT]
/v1/aggiungiPrenotazione/:id va a cercare all'interno del database la prenotazione con l'id che arriva dalla richiesta, quindi aggiorna il campo "prenotatore" con il nome dell'utente che ha effettuato la richiesta

 + Request (application/json)
 
  + Location 
  
    /v1/aggiungiPrenotazione/:id 
  
  + Body
  
            {
            
            "prenotatore":"nome",
            "sede" : "sede",
            "giorno":{"$date":{"$numberLong":"1652662800000"}

            
            }
 



 + Response 200 (text/plain)
 
        prenotazione riuscita


 + Response 404 (text/plain)
 
        Errore nella prenotazione



### /v1/rimuoviPrenotazione/:id [DELETE]
/v1/aggiungiPrenotazione/:id va a cercare all'interno del database la prenotazione con l'id che arriva dalla richiesta, quindi aggiorna il campo "prenotatore" con la stringa vuota, che rappresenta una prenotazione non effettuata
nel caso in cui l'utente che effettui la richiesta non sia lo stesso che ha precedentemente effettuato la prenotazione, gli viene inviato un messaggio di errore.
 
 
 + Request (application/json)
 
  + Location 
  
    /v1/rimuoviPrenotazione/:id 
  
  + Body
  
            {
            "prenotatore":"nome"
            }
 


 + Response 200 (text/plain)
        
        rimozione prenotazione riuscita
        
 + Response 404 (text/plain)
        
        Errore nella rimozione della prenotazione


## Prenotazione Tornei [/prenotazione_tornei]

### /v1/iscrivi/:id [POST]
/v1/iscrivi/:id si occupa di iscriviere l'utente al torneo selezionato

 + Request (application/json) 
  
  + Location 
        
        /v1/iscrivi/:id

  + Body 
        
            {
            "username":"username"
            }

 + Response 200 (plain/text)
        
        iscrizione avvenuta
 
 + Response 404 (plain/text) 
        
        iscrizione non riuscita

### /v1/disiscrivi/:id [PUT]
/v1/disiscrivi/:is si occupa di disiscrivere l'utente da un torneo a cui si è precedentemente iscritto (è una richiesta di POST anch'essa)
 + Request (application/json) 
  
  + Location 
        
        /v1/disiscrivi/:id

  + Body 
        
            {
            "username":"username"
            }

 + Response 200 (plain/text)
        
        disiscrizione avvenuta
 
 + Response 404 (plain/text) 
        
        disiscrizione non riuscita



## Tornei [/Tornei] 
### /v1/tornei [GET]
/v1/tornei/ serve per vedere la lista di tornei organizzati con la possibilità di iscriverti se vi è ancora posto disponibile

+ Response 200 ()